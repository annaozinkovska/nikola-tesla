import { isCommandBuilderCallback } from './command.js';
import { assertNotStrictEqual } from './typings/common-types.js';
import * as templates from './completion-templates.js';
import { isPromise } from './utils/is-promise.js';
import { parseCommand } from './parse-command.js';
export function completion(yargs, usage, command, shim) {
    var self = {
        completionKey: 'get-yargs-completions'
    };
    var aliases = void 0;
    self.setParsed = function setParsed(parsed) {
        aliases = parsed.aliases;
    };
    var zshShell = shim.getEnv('SHELL') && shim.getEnv('SHELL').indexOf('zsh') !== -1 || shim.getEnv('ZSH_NAME') && shim.getEnv('ZSH_NAME').indexOf('zsh') !== -1;
    self.getCompletion = function getCompletion(args, done) {
        var completions = [];
        var current = args.length ? args[args.length - 1] : '';
        var argv = yargs.parse(args, true);
        var parentCommands = yargs.getContext().commands;
        function runCompletionFunction(argv) {
            assertNotStrictEqual(completionFunction, null, shim);
            if (isSyncCompletionFunction(completionFunction)) {
                var result = completionFunction(current, argv);
                if (isPromise(result)) {
                    return result.then(function (list) {
                        shim.process.nextTick(function () {
                            done(list);
                        });
                    }).catch(function (err) {
                        shim.process.nextTick(function () {
                            throw err;
                        });
                    });
                }
                return done(result);
            } else {
                return completionFunction(current, argv, function (completions) {
                    done(completions);
                });
            }
        }
        if (completionFunction) {
            return isPromise(argv) ? argv.then(runCompletionFunction) : runCompletionFunction(argv);
        }
        var handlers = command.getCommandHandlers();
        for (var i = 0, ii = args.length; i < ii; ++i) {
            if (handlers[args[i]] && handlers[args[i]].builder) {
                var builder = handlers[args[i]].builder;
                if (isCommandBuilderCallback(builder)) {
                    var y = yargs.reset();
                    builder(y);
                    return y.argv;
                }
            }
        }
        if (!current.match(/^-/) && parentCommands[parentCommands.length - 1] !== current) {
            usage.getCommands().forEach(function (usageCommand) {
                var commandName = parseCommand(usageCommand[0]).cmd;
                if (args.indexOf(commandName) === -1) {
                    if (!zshShell) {
                        completions.push(commandName);
                    } else {
                        var desc = usageCommand[1] || '';
                        completions.push(commandName.replace(/:/g, '\\:') + ':' + desc);
                    }
                }
            });
        }
        if (current.match(/^-/) || current === '' && completions.length === 0) {
            var descs = usage.getDescriptions();
            var options = yargs.getOptions();
            Object.keys(options.key).forEach(function (key) {
                var negable = !!options.configuration['boolean-negation'] && options.boolean.includes(key);
                var keyAndAliases = [key].concat(aliases[key] || []);
                if (negable) keyAndAliases = keyAndAliases.concat(keyAndAliases.map(function (key) {
                    return 'no-' + key;
                }));
                function completeOptionKey(key) {
                    var notInArgs = keyAndAliases.every(function (val) {
                        return args.indexOf('--' + val) === -1;
                    });
                    if (notInArgs) {
                        var startsByTwoDashes = function startsByTwoDashes(s) {
                            return (/^--/.test(s)
                            );
                        };
                        var isShortOption = function isShortOption(s) {
                            return (/^[^0-9]$/.test(s)
                            );
                        };
                        var dashes = !startsByTwoDashes(current) && isShortOption(key) ? '-' : '--';
                        if (!zshShell) {
                            completions.push(dashes + key);
                        } else {
                            var desc = descs[key] || '';
                            completions.push(dashes + (key.replace(/:/g, '\\:') + ':' + desc.replace('__yargsString__:', '')));
                        }
                    }
                }
                completeOptionKey(key);
                if (negable && !!options.default[key]) completeOptionKey('no-' + key);
            });
        }
        done(completions);
    };
    self.generateCompletionScript = function generateCompletionScript($0, cmd) {
        var script = zshShell ? templates.completionZshTemplate : templates.completionShTemplate;
        var name = shim.path.basename($0);
        if ($0.match(/\.js$/)) $0 = './' + $0;
        script = script.replace(/{{app_name}}/g, name);
        script = script.replace(/{{completion_command}}/g, cmd);
        return script.replace(/{{app_path}}/g, $0);
    };
    var completionFunction = null;
    self.registerFunction = function (fn) {
        completionFunction = fn;
    };
    return self;
}
function isSyncCompletionFunction(completionFunction) {
    return completionFunction.length < 3;
}