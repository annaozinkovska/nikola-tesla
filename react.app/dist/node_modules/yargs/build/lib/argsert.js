var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

import { YError } from './yerror.js';
import { parseCommand } from './parse-command.js';
var positionName = ['first', 'second', 'third', 'fourth', 'fifth', 'sixth'];
export function argsert(arg1, arg2, arg3) {
    function parseArgs() {
        return (typeof arg1 === 'undefined' ? 'undefined' : _typeof(arg1)) === 'object' ? [{ demanded: [], optional: [] }, arg1, arg2] : [parseCommand('cmd ' + arg1), arg2, arg3];
    }
    try {
        var position = 0;

        var _parseArgs = parseArgs(),
            _parseArgs2 = _slicedToArray(_parseArgs, 3),
            parsed = _parseArgs2[0],
            callerArguments = _parseArgs2[1],
            _length = _parseArgs2[2];

        var args = [].slice.call(callerArguments);
        while (args.length && args[args.length - 1] === undefined) {
            args.pop();
        }var length = _length || args.length;
        if (length < parsed.demanded.length) {
            throw new YError('Not enough arguments provided. Expected ' + parsed.demanded.length + ' but received ' + args.length + '.');
        }
        var totalCommands = parsed.demanded.length + parsed.optional.length;
        if (length > totalCommands) {
            throw new YError('Too many arguments provided. Expected max ' + totalCommands + ' but received ' + length + '.');
        }
        parsed.demanded.forEach(function (demanded) {
            var arg = args.shift();
            var observedType = guessType(arg);
            var matchingTypes = demanded.cmd.filter(function (type) {
                return type === observedType || type === '*';
            });
            if (matchingTypes.length === 0) argumentTypeError(observedType, demanded.cmd, position);
            position += 1;
        });
        parsed.optional.forEach(function (optional) {
            if (args.length === 0) return;
            var arg = args.shift();
            var observedType = guessType(arg);
            var matchingTypes = optional.cmd.filter(function (type) {
                return type === observedType || type === '*';
            });
            if (matchingTypes.length === 0) argumentTypeError(observedType, optional.cmd, position);
            position += 1;
        });
    } catch (err) {
        console.warn(err.stack);
    }
}
function guessType(arg) {
    if (Array.isArray(arg)) {
        return 'array';
    } else if (arg === null) {
        return 'null';
    }
    return typeof arg === 'undefined' ? 'undefined' : _typeof(arg);
}
function argumentTypeError(observedType, allowedTypes, position) {
    throw new YError('Invalid ' + (positionName[position] || 'manyith') + ' argument. Expected ' + allowedTypes.join(' or ') + ' but received ' + observedType + '.');
}