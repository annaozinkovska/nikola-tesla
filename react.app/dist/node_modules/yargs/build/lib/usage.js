var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

import { assertNotStrictEqual } from './typings/common-types.js';
import { objFilter } from './utils/obj-filter.js';
import { YError } from './yerror.js';
import setBlocking from './utils/set-blocking.js';
export function usage(yargs, y18n, shim) {
    var __ = y18n.__;
    var self = {};
    var fails = [];
    self.failFn = function failFn(f) {
        fails.push(f);
    };
    var failMessage = null;
    var showHelpOnFail = true;
    self.showHelpOnFail = function showHelpOnFailFn() {
        var arg1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        var arg2 = arguments[1];

        function parseFunctionArgs() {
            return typeof arg1 === 'string' ? [true, arg1] : [arg1, arg2];
        }

        var _parseFunctionArgs = parseFunctionArgs(),
            _parseFunctionArgs2 = _slicedToArray(_parseFunctionArgs, 2),
            enabled = _parseFunctionArgs2[0],
            message = _parseFunctionArgs2[1];

        failMessage = message;
        showHelpOnFail = enabled;
        return self;
    };
    var failureOutput = false;
    self.fail = function fail(msg, err) {
        var logger = yargs._getLoggerInstance();
        if (fails.length) {
            for (var i = fails.length - 1; i >= 0; --i) {
                fails[i](msg, err, self);
            }
        } else {
            if (yargs.getExitProcess()) setBlocking(true);
            if (!failureOutput) {
                failureOutput = true;
                if (showHelpOnFail) {
                    yargs.showHelp('error');
                    logger.error();
                }
                if (msg || err) logger.error(msg || err);
                if (failMessage) {
                    if (msg || err) logger.error('');
                    logger.error(failMessage);
                }
            }
            err = err || new YError(msg);
            if (yargs.getExitProcess()) {
                return yargs.exit(1);
            } else if (yargs._hasParseCallback()) {
                return yargs.exit(1, err);
            } else {
                throw err;
            }
        }
    };
    var usages = [];
    var usageDisabled = false;
    self.usage = function (msg, description) {
        if (msg === null) {
            usageDisabled = true;
            usages = [];
            return self;
        }
        usageDisabled = false;
        usages.push([msg, description || '']);
        return self;
    };
    self.getUsage = function () {
        return usages;
    };
    self.getUsageDisabled = function () {
        return usageDisabled;
    };
    self.getPositionalGroupName = function () {
        return __('Positionals:');
    };
    var examples = [];
    self.example = function (cmd, description) {
        examples.push([cmd, description || '']);
    };
    var commands = [];
    self.command = function command(cmd, description, isDefault, aliases) {
        var deprecated = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

        if (isDefault) {
            commands = commands.map(function (cmdArray) {
                cmdArray[2] = false;
                return cmdArray;
            });
        }
        commands.push([cmd, description || '', isDefault, aliases, deprecated]);
    };
    self.getCommands = function () {
        return commands;
    };
    var descriptions = {};
    self.describe = function describe(keyOrKeys, desc) {
        if (Array.isArray(keyOrKeys)) {
            keyOrKeys.forEach(function (k) {
                self.describe(k, desc);
            });
        } else if ((typeof keyOrKeys === 'undefined' ? 'undefined' : _typeof(keyOrKeys)) === 'object') {
            Object.keys(keyOrKeys).forEach(function (k) {
                self.describe(k, keyOrKeys[k]);
            });
        } else {
            descriptions[keyOrKeys] = desc;
        }
    };
    self.getDescriptions = function () {
        return descriptions;
    };
    var epilogs = [];
    self.epilog = function (msg) {
        epilogs.push(msg);
    };
    var wrapSet = false;
    var wrap = void 0;
    self.wrap = function (cols) {
        wrapSet = true;
        wrap = cols;
    };
    function getWrap() {
        if (!wrapSet) {
            wrap = windowWidth();
            wrapSet = true;
        }
        return wrap;
    }
    var deferY18nLookupPrefix = '__yargsString__:';
    self.deferY18nLookup = function (str) {
        return deferY18nLookupPrefix + str;
    };
    self.help = function help() {
        if (cachedHelpMessage) return cachedHelpMessage;
        normalizeAliases();
        var base$0 = yargs.customScriptName ? yargs.$0 : shim.path.basename(yargs.$0);
        var demandedOptions = yargs.getDemandedOptions();
        var demandedCommands = yargs.getDemandedCommands();
        var deprecatedOptions = yargs.getDeprecatedOptions();
        var groups = yargs.getGroups();
        var options = yargs.getOptions();
        var keys = [];
        keys = keys.concat(Object.keys(descriptions));
        keys = keys.concat(Object.keys(demandedOptions));
        keys = keys.concat(Object.keys(demandedCommands));
        keys = keys.concat(Object.keys(options.default));
        keys = keys.filter(filterHiddenOptions);
        keys = Object.keys(keys.reduce(function (acc, key) {
            if (key !== '_') acc[key] = true;
            return acc;
        }, {}));
        var theWrap = getWrap();
        var ui = shim.cliui({
            width: theWrap,
            wrap: !!theWrap
        });
        if (!usageDisabled) {
            if (usages.length) {
                usages.forEach(function (usage) {
                    ui.div('' + usage[0].replace(/\$0/g, base$0));
                    if (usage[1]) {
                        ui.div({ text: '' + usage[1], padding: [1, 0, 0, 0] });
                    }
                });
                ui.div();
            } else if (commands.length) {
                var u = null;
                if (demandedCommands._) {
                    u = base$0 + ' <' + __('command') + '>\n';
                } else {
                    u = base$0 + ' [' + __('command') + ']\n';
                }
                ui.div('' + u);
            }
        }
        if (commands.length) {
            ui.div(__('Commands:'));
            var context = yargs.getContext();
            var parentCommands = context.commands.length ? context.commands.join(' ') + ' ' : '';
            if (yargs.getParserConfiguration()['sort-commands'] === true) {
                commands = commands.sort(function (a, b) {
                    return a[0].localeCompare(b[0]);
                });
            }
            commands.forEach(function (command) {
                var commandString = base$0 + ' ' + parentCommands + command[0].replace(/^\$0 ?/, '');
                ui.span({
                    text: commandString,
                    padding: [0, 2, 0, 2],
                    width: maxWidth(commands, theWrap, '' + base$0 + parentCommands) + 4
                }, { text: command[1] });
                var hints = [];
                if (command[2]) hints.push('[' + __('default') + ']');
                if (command[3] && command[3].length) {
                    hints.push('[' + __('aliases:') + ' ' + command[3].join(', ') + ']');
                }
                if (command[4]) {
                    if (typeof command[4] === 'string') {
                        hints.push('[' + __('deprecated: %s', command[4]) + ']');
                    } else {
                        hints.push('[' + __('deprecated') + ']');
                    }
                }
                if (hints.length) {
                    ui.div({
                        text: hints.join(' '),
                        padding: [0, 0, 0, 2],
                        align: 'right'
                    });
                } else {
                    ui.div();
                }
            });
            ui.div();
        }
        var aliasKeys = (Object.keys(options.alias) || []).concat(Object.keys(yargs.parsed.newAliases) || []);
        keys = keys.filter(function (key) {
            return !yargs.parsed.newAliases[key] && aliasKeys.every(function (alias) {
                return (options.alias[alias] || []).indexOf(key) === -1;
            });
        });
        var defaultGroup = __('Options:');
        if (!groups[defaultGroup]) groups[defaultGroup] = [];
        addUngroupedKeys(keys, options.alias, groups, defaultGroup);
        var isLongSwitch = function isLongSwitch(sw) {
            return (/^--/.test(getText(sw))
            );
        };
        var displayedGroups = Object.keys(groups).filter(function (groupName) {
            return groups[groupName].length > 0;
        }).map(function (groupName) {
            var normalizedKeys = groups[groupName].filter(filterHiddenOptions).map(function (key) {
                if (~aliasKeys.indexOf(key)) return key;
                for (var i = 0, aliasKey; (aliasKey = aliasKeys[i]) !== undefined; i++) {
                    if (~(options.alias[aliasKey] || []).indexOf(key)) return aliasKey;
                }
                return key;
            });
            return { groupName: groupName, normalizedKeys: normalizedKeys };
        }).filter(function (_ref) {
            var normalizedKeys = _ref.normalizedKeys;
            return normalizedKeys.length > 0;
        }).map(function (_ref2) {
            var groupName = _ref2.groupName,
                normalizedKeys = _ref2.normalizedKeys;

            var switches = normalizedKeys.reduce(function (acc, key) {
                acc[key] = [key].concat(options.alias[key] || []).map(function (sw) {
                    if (groupName === self.getPositionalGroupName()) return sw;else {
                        return (/^[0-9]$/.test(sw) ? ~options.boolean.indexOf(key) ? '-' : '--' : sw.length > 1 ? '--' : '-') + sw;
                    }
                }).sort(function (sw1, sw2) {
                    return isLongSwitch(sw1) === isLongSwitch(sw2) ? 0 : isLongSwitch(sw1) ? 1 : -1;
                }).join(', ');
                return acc;
            }, {});
            return { groupName: groupName, normalizedKeys: normalizedKeys, switches: switches };
        });
        var shortSwitchesUsed = displayedGroups.filter(function (_ref3) {
            var groupName = _ref3.groupName;
            return groupName !== self.getPositionalGroupName();
        }).some(function (_ref4) {
            var normalizedKeys = _ref4.normalizedKeys,
                switches = _ref4.switches;
            return !normalizedKeys.every(function (key) {
                return isLongSwitch(switches[key]);
            });
        });
        if (shortSwitchesUsed) {
            displayedGroups.filter(function (_ref5) {
                var groupName = _ref5.groupName;
                return groupName !== self.getPositionalGroupName();
            }).forEach(function (_ref6) {
                var normalizedKeys = _ref6.normalizedKeys,
                    switches = _ref6.switches;

                normalizedKeys.forEach(function (key) {
                    if (isLongSwitch(switches[key])) {
                        switches[key] = addIndentation(switches[key], '-x, '.length);
                    }
                });
            });
        }
        displayedGroups.forEach(function (_ref7) {
            var groupName = _ref7.groupName,
                normalizedKeys = _ref7.normalizedKeys,
                switches = _ref7.switches;

            ui.div(groupName);
            normalizedKeys.forEach(function (key) {
                var kswitch = switches[key];
                var desc = descriptions[key] || '';
                var type = null;
                if (~desc.lastIndexOf(deferY18nLookupPrefix)) desc = __(desc.substring(deferY18nLookupPrefix.length));
                if (~options.boolean.indexOf(key)) type = '[' + __('boolean') + ']';
                if (~options.count.indexOf(key)) type = '[' + __('count') + ']';
                if (~options.string.indexOf(key)) type = '[' + __('string') + ']';
                if (~options.normalize.indexOf(key)) type = '[' + __('string') + ']';
                if (~options.array.indexOf(key)) type = '[' + __('array') + ']';
                if (~options.number.indexOf(key)) type = '[' + __('number') + ']';
                var deprecatedExtra = function deprecatedExtra(deprecated) {
                    return typeof deprecated === 'string' ? '[' + __('deprecated: %s', deprecated) + ']' : '[' + __('deprecated') + ']';
                };
                var extra = [key in deprecatedOptions ? deprecatedExtra(deprecatedOptions[key]) : null, type, key in demandedOptions ? '[' + __('required') + ']' : null, options.choices && options.choices[key] ? '[' + __('choices:') + ' ' + self.stringifiedValues(options.choices[key]) + ']' : null, defaultString(options.default[key], options.defaultDescription[key])].filter(Boolean).join(' ');
                ui.span({
                    text: getText(kswitch),
                    padding: [0, 2, 0, 2 + getIndentation(kswitch)],
                    width: maxWidth(switches, theWrap) + 4
                }, desc);
                if (extra) ui.div({ text: extra, padding: [0, 0, 0, 2], align: 'right' });else ui.div();
            });
            ui.div();
        });
        if (examples.length) {
            ui.div(__('Examples:'));
            examples.forEach(function (example) {
                example[0] = example[0].replace(/\$0/g, base$0);
            });
            examples.forEach(function (example) {
                if (example[1] === '') {
                    ui.div({
                        text: example[0],
                        padding: [0, 2, 0, 2]
                    });
                } else {
                    ui.div({
                        text: example[0],
                        padding: [0, 2, 0, 2],
                        width: maxWidth(examples, theWrap) + 4
                    }, {
                        text: example[1]
                    });
                }
            });
            ui.div();
        }
        if (epilogs.length > 0) {
            var e = epilogs.map(function (epilog) {
                return epilog.replace(/\$0/g, base$0);
            }).join('\n');
            ui.div(e + '\n');
        }
        return ui.toString().replace(/\s*$/, '');
    };
    function maxWidth(table, theWrap, modifier) {
        var width = 0;
        if (!Array.isArray(table)) {
            table = Object.values(table).map(function (v) {
                return [v];
            });
        }
        table.forEach(function (v) {
            width = Math.max(shim.stringWidth(modifier ? modifier + ' ' + getText(v[0]) : getText(v[0])) + getIndentation(v[0]), width);
        });
        if (theWrap) width = Math.min(width, parseInt((theWrap * 0.5).toString(), 10));
        return width;
    }
    function normalizeAliases() {
        var demandedOptions = yargs.getDemandedOptions();
        var options = yargs.getOptions();
        (Object.keys(options.alias) || []).forEach(function (key) {
            options.alias[key].forEach(function (alias) {
                if (descriptions[alias]) self.describe(key, descriptions[alias]);
                if (alias in demandedOptions) yargs.demandOption(key, demandedOptions[alias]);
                if (~options.boolean.indexOf(alias)) yargs.boolean(key);
                if (~options.count.indexOf(alias)) yargs.count(key);
                if (~options.string.indexOf(alias)) yargs.string(key);
                if (~options.normalize.indexOf(alias)) yargs.normalize(key);
                if (~options.array.indexOf(alias)) yargs.array(key);
                if (~options.number.indexOf(alias)) yargs.number(key);
            });
        });
    }
    var cachedHelpMessage = void 0;
    self.cacheHelpMessage = function () {
        cachedHelpMessage = this.help();
    };
    self.clearCachedHelpMessage = function () {
        cachedHelpMessage = undefined;
    };
    function addUngroupedKeys(keys, aliases, groups, defaultGroup) {
        var groupedKeys = [];
        var toCheck = null;
        Object.keys(groups).forEach(function (group) {
            groupedKeys = groupedKeys.concat(groups[group]);
        });
        keys.forEach(function (key) {
            toCheck = [key].concat(aliases[key]);
            if (!toCheck.some(function (k) {
                return groupedKeys.indexOf(k) !== -1;
            })) {
                groups[defaultGroup].push(key);
            }
        });
        return groupedKeys;
    }
    function filterHiddenOptions(key) {
        return yargs.getOptions().hiddenOptions.indexOf(key) < 0 || yargs.parsed.argv[yargs.getOptions().showHiddenOpt];
    }
    self.showHelp = function (level) {
        var logger = yargs._getLoggerInstance();
        if (!level) level = 'error';
        var emit = typeof level === 'function' ? level : logger[level];
        emit(self.help());
    };
    self.functionDescription = function (fn) {
        var description = fn.name ? shim.Parser.decamelize(fn.name, '-') : __('generated-value');
        return ['(', description, ')'].join('');
    };
    self.stringifiedValues = function stringifiedValues(values, separator) {
        var string = '';
        var sep = separator || ', ';
        var array = [].concat(values);
        if (!values || !array.length) return string;
        array.forEach(function (value) {
            if (string.length) string += sep;
            string += JSON.stringify(value);
        });
        return string;
    };
    function defaultString(value, defaultDescription) {
        var string = '[' + __('default:') + ' ';
        if (value === undefined && !defaultDescription) return null;
        if (defaultDescription) {
            string += defaultDescription;
        } else {
            switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {
                case 'string':
                    string += '"' + value + '"';
                    break;
                case 'object':
                    string += JSON.stringify(value);
                    break;
                default:
                    string += value;
            }
        }
        return string + ']';
    }
    function windowWidth() {
        var maxWidth = 80;
        if (shim.process.stdColumns) {
            return Math.min(maxWidth, shim.process.stdColumns);
        } else {
            return maxWidth;
        }
    }
    var version = null;
    self.version = function (ver) {
        version = ver;
    };
    self.showVersion = function () {
        var logger = yargs._getLoggerInstance();
        logger.log(version);
    };
    self.reset = function reset(localLookup) {
        failMessage = null;
        failureOutput = false;
        usages = [];
        usageDisabled = false;
        epilogs = [];
        examples = [];
        commands = [];
        descriptions = objFilter(descriptions, function (k) {
            return !localLookup[k];
        });
        return self;
    };
    var frozens = [];
    self.freeze = function freeze() {
        frozens.push({
            failMessage: failMessage,
            failureOutput: failureOutput,
            usages: usages,
            usageDisabled: usageDisabled,
            epilogs: epilogs,
            examples: examples,
            commands: commands,
            descriptions: descriptions
        });
    };
    self.unfreeze = function unfreeze() {
        var frozen = frozens.pop();
        assertNotStrictEqual(frozen, undefined, shim);
        failMessage = frozen.failMessage;
        failureOutput = frozen.failureOutput;
        usages = frozen.usages;
        usageDisabled = frozen.usageDisabled;
        epilogs = frozen.epilogs;
        examples = frozen.examples;
        commands = frozen.commands;
        descriptions = frozen.descriptions;
    };
    return self;
}
function isIndentedText(text) {
    return (typeof text === 'undefined' ? 'undefined' : _typeof(text)) === 'object';
}
function addIndentation(text, indent) {
    return isIndentedText(text) ? { text: text.text, indentation: text.indentation + indent } : { text: text, indentation: indent };
}
function getIndentation(text) {
    return isIndentedText(text) ? text.indentation : 0;
}
function getText(text) {
    return isIndentedText(text) ? text.text : text;
}