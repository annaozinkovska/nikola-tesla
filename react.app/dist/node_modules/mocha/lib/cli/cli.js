#!/usr/bin/env node


'use strict';

/**
 * Contains CLI entry point and public API for programmatic usage in Node.js.
 * - Option parsing is handled by {@link https://npm.im/yargs yargs}.
 * - If executed via `node`, this module will run {@linkcode module:lib/cli.main main()}.
 * @public
 * @module lib/cli
 */

var debug = require('debug')('mocha:cli:cli');
var symbols = require('log-symbols');
var yargs = require('yargs/yargs');
var path = require('path');

var _require = require('./options'),
    loadRc = _require.loadRc,
    loadPkgRc = _require.loadPkgRc,
    loadOptions = _require.loadOptions,
    YARGS_PARSER_CONFIG = _require.YARGS_PARSER_CONFIG;

var lookupFiles = require('./lookup-files');
var commands = require('./commands');
var ansi = require('ansi-colors');

var _require2 = require('../../package.json'),
    repository = _require2.repository,
    homepage = _require2.homepage,
    version = _require2.version,
    gitter = _require2.gitter;

var _require3 = require('../utils'),
    cwd = _require3.cwd;

/**
 * - Accepts an `Array` of arguments
 * - Modifies {@link https://nodejs.org/api/modules.html#modules_module_paths Node.js' search path} for easy loading of consumer modules
 * - Sets {@linkcode https://nodejs.org/api/errors.html#errors_error_stacktracelimit Error.stackTraceLimit} to `Infinity`
 * @public
 * @summary Mocha's main command-line entry-point.
 * @param {string[]} argv - Array of arguments to parse, or by default the lovely `process.argv.slice(2)`
 * @param {object} [mochaArgs] - Object of already parsed Mocha arguments (by bin/mocha)
 */


exports.main = function () {
  var argv = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.argv.slice(2);
  var mochaArgs = arguments[1];

  debug('entered main with raw args', argv);
  // ensure we can require() from current working directory
  if (typeof module.paths !== 'undefined') {
    module.paths.push(cwd(), path.resolve('node_modules'));
  }

  Error.stackTraceLimit = Infinity; // configurable via --stack-trace-limit?

  var args = mochaArgs || loadOptions(argv);

  yargs().scriptName('mocha').command(commands.run).command(commands.init).updateStrings({
    'Positionals:': 'Positional Arguments',
    'Options:': 'Other Options',
    'Commands:': 'Commands'
  }).fail(function (msg, err, yargs) {
    debug('caught error sometime before command handler: %O', err);
    yargs.showHelp();
    console.error('\n' + symbols.error + ' ' + ansi.red('ERROR:') + ' ' + msg);
    process.exitCode = 1;
  }).help('help', 'Show usage information & exit').alias('help', 'h').version('version', 'Show version number & exit', version).alias('version', 'V').wrap(process.stdout.columns ? Math.min(process.stdout.columns, 80) : 80).epilog('Mocha Resources\n    Chat: ' + ansi.magenta(gitter) + '\n  GitHub: ' + ansi.blue(repository.url) + '\n    Docs: ' + ansi.yellow(homepage) + '\n      ').parserConfiguration(YARGS_PARSER_CONFIG).config(args).parse(args._);
};

exports.lookupFiles = lookupFiles;
exports.loadOptions = loadOptions;
exports.loadPkgRc = loadPkgRc;
exports.loadRc = loadRc;

// allow direct execution
if (require.main === module) {
  exports.main();
}