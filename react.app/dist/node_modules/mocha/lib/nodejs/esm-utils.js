import _regeneratorRuntime from 'babel-runtime/regenerator';

var _this = this;

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var path = require('path');
var url = require('url');

var forward = function forward(x) {
  return x;
};

var formattedImport = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {
    var esmDecorator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : forward;
    var newErrorWithFilename;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!path.isAbsolute(file)) {
              _context.next = 14;
              break;
            }

            _context.prev = 1;
            _context.next = 4;
            return exports.doImport(esmDecorator(url.pathToFileURL(file)));

          case 4:
            return _context.abrupt('return', _context.sent);

          case 7:
            _context.prev = 7;
            _context.t0 = _context['catch'](1);

            if (!(_context.t0 instanceof SyntaxError && _context.t0.message && _context.t0.stack && !_context.t0.stack.includes(file))) {
              _context.next = 13;
              break;
            }

            newErrorWithFilename = new SyntaxError(_context.t0.message);

            newErrorWithFilename.stack = _context.t0.stack.replace(/^SyntaxError/, 'SyntaxError[ @' + file + ' ]');
            throw newErrorWithFilename;

          case 13:
            throw _context.t0;

          case 14:
            return _context.abrupt('return', exports.doImport(esmDecorator(file)));

          case 15:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, _this, [[1, 7]]);
  }));

  return function formattedImport(_x2) {
    return _ref.apply(this, arguments);
  };
}();

exports.doImport = function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(file) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt('return', import(file));

          case 1:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, _this);
  }));

  return function (_x3) {
    return _ref2.apply(this, arguments);
  };
}();

exports.requireOrImport = function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(file, esmDecorator) {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (!(path.extname(file) === '.mjs')) {
              _context3.next = 2;
              break;
            }

            return _context3.abrupt('return', formattedImport(file, esmDecorator));

          case 2:
            _context3.prev = 2;
            _context3.t0 = dealWithExports;
            _context3.next = 6;
            return formattedImport(file, esmDecorator);

          case 6:
            _context3.t1 = _context3.sent;
            return _context3.abrupt('return', (0, _context3.t0)(_context3.t1));

          case 10:
            _context3.prev = 10;
            _context3.t2 = _context3['catch'](2);

            if (!(_context3.t2.code === 'ERR_MODULE_NOT_FOUND' || _context3.t2.code === 'ERR_UNKNOWN_FILE_EXTENSION' || _context3.t2.code === 'ERR_UNSUPPORTED_DIR_IMPORT')) {
              _context3.next = 26;
              break;
            }

            _context3.prev = 13;
            return _context3.abrupt('return', require(file));

          case 17:
            _context3.prev = 17;
            _context3.t3 = _context3['catch'](13);

            if (!(_context3.t3.code === 'ERR_REQUIRE_ESM' || _context3.t3 instanceof SyntaxError && _context3.t3.toString().includes('Cannot use import statement outside a module'))) {
              _context3.next = 23;
              break;
            }

            throw _context3.t2;

          case 23:
            throw _context3.t3;

          case 24:
            _context3.next = 27;
            break;

          case 26:
            throw _context3.t2;

          case 27:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, _this, [[2, 10], [13, 17]]);
  }));

  return function (_x4, _x5) {
    return _ref3.apply(this, arguments);
  };
}();

function dealWithExports(module) {
  if (module.default) {
    return module.default;
  } else {
    return Object.assign({}, module, { default: undefined });
  }
}

exports.loadFilesAsync = function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(files, preLoadFunc, postLoadFunc, esmDecorator) {
    var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, file, result;

    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context4.prev = 3;
            _iterator = files[Symbol.iterator]();

          case 5:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context4.next = 15;
              break;
            }

            file = _step.value;

            preLoadFunc(file);
            _context4.next = 10;
            return exports.requireOrImport(path.resolve(file), esmDecorator);

          case 10:
            result = _context4.sent;

            postLoadFunc(file, result);

          case 12:
            _iteratorNormalCompletion = true;
            _context4.next = 5;
            break;

          case 15:
            _context4.next = 21;
            break;

          case 17:
            _context4.prev = 17;
            _context4.t0 = _context4['catch'](3);
            _didIteratorError = true;
            _iteratorError = _context4.t0;

          case 21:
            _context4.prev = 21;
            _context4.prev = 22;

            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }

          case 24:
            _context4.prev = 24;

            if (!_didIteratorError) {
              _context4.next = 27;
              break;
            }

            throw _iteratorError;

          case 27:
            return _context4.finish(24);

          case 28:
            return _context4.finish(21);

          case 29:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, _this, [[3, 17, 21, 29], [22,, 24, 28]]);
  }));

  return function (_x6, _x7, _x8, _x9) {
    return _ref4.apply(this, arguments);
  };
}();