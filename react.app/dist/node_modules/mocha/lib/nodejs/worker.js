/**
 * A worker process.  Consumes {@link module:reporters/parallel-buffered} reporter.
 * @module worker
 * @private
 */

'use strict';

import _regeneratorRuntime from 'babel-runtime/regenerator';

var _this = this;

/**
 * Runs a single test file in a worker thread.
 * @param {string} filepath - Filepath of test file
 * @param {string} [serializedOptions] - **Serialized** options. This string will be eval'd!
 * @see https://npm.im/serialize-javascript
 * @returns {Promise<{failures: number, events: BufferedEvent[]}>} - Test
 * failure count and list of events.
 */
var run = function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(filepath) {
    var serializedOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '{}';
    var argv, opts, mocha;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (filepath) {
              _context2.next = 2;
              break;
            }

            throw createInvalidArgumentTypeError('Expected a non-empty "filepath" argument', 'file', 'string');

          case 2:

            debug('run(): running test file %s', filepath);

            if (!(typeof serializedOptions !== 'string')) {
              _context2.next = 5;
              break;
            }

            throw createInvalidArgumentTypeError('run() expects second parameter to be a string which was serialized by the `serialize-javascript` module', 'serializedOptions', 'string');

          case 5:
            argv = void 0;
            _context2.prev = 6;

            // eslint-disable-next-line no-eval
            argv = eval('(' + serializedOptions + ')');
            _context2.next = 13;
            break;

          case 10:
            _context2.prev = 10;
            _context2.t0 = _context2['catch'](6);
            throw createInvalidArgumentValueError('run() was unable to deserialize the options', 'serializedOptions', serializedOptions);

          case 13:
            opts = Object.assign({ ui: 'bdd' }, argv, {
              // if this was true, it would cause infinite recursion.
              parallel: false,
              // this doesn't work in parallel mode
              forbidOnly: true,
              // it's useful for a Mocha instance to know if it's running in a worker process.
              isWorker: true
            });
            _context2.next = 16;
            return bootstrap(opts);

          case 16:

            opts.rootHooks = rootHooks;

            mocha = new Mocha(opts).addFile(filepath);
            _context2.prev = 18;
            _context2.next = 21;
            return mocha.loadFilesAsync();

          case 21:
            _context2.next = 27;
            break;

          case 23:
            _context2.prev = 23;
            _context2.t1 = _context2['catch'](18);

            debug('run(): could not load file %s: %s', filepath, _context2.t1);
            throw _context2.t1;

          case 27:
            return _context2.abrupt('return', new Promise(function (resolve, reject) {
              var debugInterval = void 0;
              /* istanbul ignore next */
              if (isDebugEnabled) {
                debugInterval = setInterval(function () {
                  debug('run(): still running %s...', filepath);
                }, 5000).unref();
              }
              mocha.run(function (result) {
                // Runner adds these; if we don't remove them, we'll get a leak.
                process.removeAllListeners('uncaughtException');
                process.removeAllListeners('unhandledRejection');

                try {
                  var serialized = serialize(result);
                  debug('run(): completed run with %d test failures; returning to main process', typeof result.failures === 'number' ? result.failures : 0);
                  resolve(serialized);
                } catch (err) {
                  // TODO: figure out exactly what the sad path looks like here.
                  // rejection should only happen if an error is "unrecoverable"
                  debug('run(): serialization failed; rejecting: %O', err);
                  reject(err);
                } finally {
                  clearInterval(debugInterval);
                }
              });
            }));

          case 28:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this, [[6, 10], [18, 23]]);
  }));

  return function run(_x3) {
    return _ref2.apply(this, arguments);
  };
}();

// this registers the `run` function.


function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('../errors'),
    createInvalidArgumentTypeError = _require.createInvalidArgumentTypeError,
    createInvalidArgumentValueError = _require.createInvalidArgumentValueError;

var workerpool = require('workerpool');
var Mocha = require('../mocha');

var _require2 = require('../cli/run-helpers'),
    handleRequires = _require2.handleRequires,
    validateLegacyPlugin = _require2.validateLegacyPlugin;

var d = require('debug');
var debug = d.debug('mocha:parallel:worker:' + process.pid);
var isDebugEnabled = d.enabled('mocha:parallel:worker:' + process.pid);

var _require3 = require('./serializer'),
    serialize = _require3.serialize;

var _global = global,
    setInterval = _global.setInterval,
    clearInterval = _global.clearInterval;


var rootHooks = void 0;

if (workerpool.isMainThread) {
  throw new Error('This script is intended to be run as a worker (by the `workerpool` package).');
}

/**
 * Initializes some stuff on the first call to {@link run}.
 *
 * Handles `--require` and `--ui`.  Does _not_ handle `--reporter`,
 * as only the `Buffered` reporter is used.
 *
 * **This function only runs once per worker**; it overwrites itself with a no-op
 * before returning.
 *
 * @param {Options} argv - Command-line options
 */
var bootstrap = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(argv) {
    var plugins;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return handleRequires(argv.require, {
              ignoredPlugins: ['mochaGlobalSetup', 'mochaGlobalTeardown']
            });

          case 2:
            plugins = _context.sent;

            validateLegacyPlugin(argv, 'ui', Mocha.interfaces);

            rootHooks = plugins.rootHooks;
            bootstrap = function bootstrap() {};
            debug('bootstrap(): finished with args: %O', argv);

          case 7:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, _this);
  }));

  return function bootstrap(_x) {
    return _ref.apply(this, arguments);
  };
}();workerpool.worker({ run: run });

debug('started worker process');

// for testing
exports.run = run;