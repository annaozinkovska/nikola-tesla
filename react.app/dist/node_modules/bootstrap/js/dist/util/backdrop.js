var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*!
  * Bootstrap backdrop.js v5.2.3 (https://getbootstrap.com/)
  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
(function (global, factory) {
  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('../dom/event-handler'), require('./index'), require('./config')) : typeof define === 'function' && define.amd ? define(['../dom/event-handler', './index', './config'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Backdrop = factory(global.EventHandler, global.Index, global.Config));
})(this, function (EventHandler, index, Config) {
  'use strict';

  var _interopDefaultLegacy = function _interopDefaultLegacy(e) {
    return e && (typeof e === 'undefined' ? 'undefined' : _typeof(e)) === 'object' && 'default' in e ? e : { default: e };
  };

  var EventHandler__default = /*#__PURE__*/_interopDefaultLegacy(EventHandler);
  var Config__default = /*#__PURE__*/_interopDefaultLegacy(Config);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.3): util/backdrop.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * Constants
   */

  var NAME = 'backdrop';
  var CLASS_NAME_FADE = 'fade';
  var CLASS_NAME_SHOW = 'show';
  var EVENT_MOUSEDOWN = 'mousedown.bs.' + NAME;
  var Default = {
    className: 'modal-backdrop',
    clickCallback: null,
    isAnimated: false,
    isVisible: true,
    // if false, we use the backdrop helper without adding any element to the dom
    rootElement: 'body' // give the choice to place backdrop under different elements

  };
  var DefaultType = {
    className: 'string',
    clickCallback: '(function|null)',
    isAnimated: 'boolean',
    isVisible: 'boolean',
    rootElement: '(element|string)'
  };
  /**
   * Class definition
   */

  var Backdrop = function (_Config__default$defa) {
    _inherits(Backdrop, _Config__default$defa);

    function Backdrop(config) {
      _classCallCheck(this, Backdrop);

      var _this = _possibleConstructorReturn(this, (Backdrop.__proto__ || Object.getPrototypeOf(Backdrop)).call(this));

      _this._config = _this._getConfig(config);
      _this._isAppended = false;
      _this._element = null;
      return _this;
    } // Getters


    _createClass(Backdrop, [{
      key: 'show',
      // Public


      value: function show(callback) {
        if (!this._config.isVisible) {
          index.execute(callback);
          return;
        }

        this._append();

        var element = this._getElement();

        if (this._config.isAnimated) {
          index.reflow(element);
        }

        element.classList.add(CLASS_NAME_SHOW);

        this._emulateAnimation(function () {
          index.execute(callback);
        });
      }
    }, {
      key: 'hide',
      value: function hide(callback) {
        var _this2 = this;

        if (!this._config.isVisible) {
          index.execute(callback);
          return;
        }

        this._getElement().classList.remove(CLASS_NAME_SHOW);

        this._emulateAnimation(function () {
          _this2.dispose();
          index.execute(callback);
        });
      }
    }, {
      key: 'dispose',
      value: function dispose() {
        if (!this._isAppended) {
          return;
        }

        EventHandler__default.default.off(this._element, EVENT_MOUSEDOWN);

        this._element.remove();

        this._isAppended = false;
      } // Private


    }, {
      key: '_getElement',
      value: function _getElement() {
        if (!this._element) {
          var backdrop = document.createElement('div');
          backdrop.className = this._config.className;

          if (this._config.isAnimated) {
            backdrop.classList.add(CLASS_NAME_FADE);
          }

          this._element = backdrop;
        }

        return this._element;
      }
    }, {
      key: '_configAfterMerge',
      value: function _configAfterMerge(config) {
        // use getElement() with the default "body" to get a fresh Element on each instantiation
        config.rootElement = index.getElement(config.rootElement);
        return config;
      }
    }, {
      key: '_append',
      value: function _append() {
        var _this3 = this;

        if (this._isAppended) {
          return;
        }

        var element = this._getElement();

        this._config.rootElement.append(element);

        EventHandler__default.default.on(element, EVENT_MOUSEDOWN, function () {
          index.execute(_this3._config.clickCallback);
        });
        this._isAppended = true;
      }
    }, {
      key: '_emulateAnimation',
      value: function _emulateAnimation(callback) {
        index.executeAfterTransition(callback, this._getElement(), this._config.isAnimated);
      }
    }], [{
      key: 'Default',
      get: function get() {
        return Default;
      }
    }, {
      key: 'DefaultType',
      get: function get() {
        return DefaultType;
      }
    }, {
      key: 'NAME',
      get: function get() {
        return NAME;
      }
    }]);

    return Backdrop;
  }(Config__default.default);

  return Backdrop;
});
//# sourceMappingURL=backdrop.js.map