'use strict';

var UPPERCASE = /[Lpu\{\}]/;
var LOWERCASE = /[Llp\{\}]/;
var LEADING_CAPITAL = /^[Lpu\{\}](?![Lpu\{\}])/g;
var IDENTIFIER = /([AN_ahlp\{\}]|$)/;
var SEPARATORS = /[_.\- ]+/;

var LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);
var SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');
var NUMBERS_AND_IDENTIFIER = new RegExp('\\d+' + IDENTIFIER.source, 'gu');

var preserveCamelCase = function preserveCamelCase(string, toLowerCase, toUpperCase) {
	var isLastCharLower = false;
	var isLastCharUpper = false;
	var isLastLastCharUpper = false;

	for (var i = 0; i < string.length; i++) {
		var character = string[i];

		if (isLastCharLower && UPPERCASE.test(character)) {
			string = string.slice(0, i) + '-' + string.slice(i);
			isLastCharLower = false;
			isLastLastCharUpper = isLastCharUpper;
			isLastCharUpper = true;
			i++;
		} else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {
			string = string.slice(0, i - 1) + '-' + string.slice(i - 1);
			isLastLastCharUpper = isLastCharUpper;
			isLastCharUpper = false;
			isLastCharLower = true;
		} else {
			isLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;
			isLastLastCharUpper = isLastCharUpper;
			isLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;
		}
	}

	return string;
};

var preserveConsecutiveUppercase = function preserveConsecutiveUppercase(input, toLowerCase) {
	LEADING_CAPITAL.lastIndex = 0;

	return input.replace(LEADING_CAPITAL, function (m1) {
		return toLowerCase(m1);
	});
};

var postProcess = function postProcess(input, toUpperCase) {
	SEPARATORS_AND_IDENTIFIER.lastIndex = 0;
	NUMBERS_AND_IDENTIFIER.lastIndex = 0;

	return input.replace(SEPARATORS_AND_IDENTIFIER, function (_, identifier) {
		return toUpperCase(identifier);
	}).replace(NUMBERS_AND_IDENTIFIER, function (m) {
		return toUpperCase(m);
	});
};

var camelCase = function camelCase(input, options) {
	if (!(typeof input === 'string' || Array.isArray(input))) {
		throw new TypeError('Expected the input to be `string | string[]`');
	}

	options = Object.assign({
		pascalCase: false,
		preserveConsecutiveUppercase: false
	}, options);

	if (Array.isArray(input)) {
		input = input.map(function (x) {
			return x.trim();
		}).filter(function (x) {
			return x.length;
		}).join('-');
	} else {
		input = input.trim();
	}

	if (input.length === 0) {
		return '';
	}

	var toLowerCase = options.locale === false ? function (string) {
		return string.toLowerCase();
	} : function (string) {
		return string.toLocaleLowerCase(options.locale);
	};
	var toUpperCase = options.locale === false ? function (string) {
		return string.toUpperCase();
	} : function (string) {
		return string.toLocaleUpperCase(options.locale);
	};

	if (input.length === 1) {
		return options.pascalCase ? toUpperCase(input) : toLowerCase(input);
	}

	var hasUpperCase = input !== toLowerCase(input);

	if (hasUpperCase) {
		input = preserveCamelCase(input, toLowerCase, toUpperCase);
	}

	input = input.replace(LEADING_SEPARATORS, '');

	if (options.preserveConsecutiveUppercase) {
		input = preserveConsecutiveUppercase(input, toLowerCase);
	} else {
		input = toLowerCase(input);
	}

	if (options.pascalCase) {
		input = toUpperCase(input.charAt(0)) + input.slice(1);
	}

	return postProcess(input, toUpperCase);
};

module.exports = camelCase;
// TODO: Remove this for the next major release
module.exports.default = camelCase;