import _regeneratorRuntime from 'babel-runtime/regenerator';

var _this = this;

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var random = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(bytes) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt('return', crypto.getRandomValues(new Uint8Array(bytes)));

          case 1:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, _this);
  }));

  return function random(_x) {
    return _ref.apply(this, arguments);
  };
}();
var customAlphabet = function customAlphabet(alphabet) {
  var defaultSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 21;

  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;
  var step = -~(1.6 * mask * defaultSize / alphabet.length);
  return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultSize;
    var id, bytes, i;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            id = '';

          case 1:
            if (!true) {
              _context2.next = 12;
              break;
            }

            bytes = crypto.getRandomValues(new Uint8Array(step));
            i = step;

          case 4:
            if (!i--) {
              _context2.next = 10;
              break;
            }

            id += alphabet[bytes[i] & mask] || '';

            if (!(id.length === size)) {
              _context2.next = 8;
              break;
            }

            return _context2.abrupt('return', id);

          case 8:
            _context2.next = 4;
            break;

          case 10:
            _context2.next = 1;
            break;

          case 12:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, _this);
  }));
};
var nanoid = function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 21;
    var id, bytes, byte;
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            id = '';
            bytes = crypto.getRandomValues(new Uint8Array(size));

            while (size--) {
              byte = bytes[size] & 63;

              if (byte < 36) {
                id += byte.toString(36);
              } else if (byte < 62) {
                id += (byte - 26).toString(36).toUpperCase();
              } else if (byte < 63) {
                id += '_';
              } else {
                id += '-';
              }
            }
            return _context3.abrupt('return', id);

          case 4:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, _this);
  }));

  return function nanoid() {
    return _ref3.apply(this, arguments);
  };
}();
export { nanoid, customAlphabet, random };