'use strict';

import _regeneratorRuntime from 'babel-runtime/regenerator';

var _this = this;

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var fs = require('fs');

var _require = require('util'),
    promisify = _require.promisify;

var pAccess = promisify(fs.access);

module.exports = function () {
	var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {
		return _regeneratorRuntime.wrap(function _callee$(_context) {
			while (1) {
				switch (_context.prev = _context.next) {
					case 0:
						_context.prev = 0;
						_context.next = 3;
						return pAccess(path);

					case 3:
						return _context.abrupt('return', true);

					case 6:
						_context.prev = 6;
						_context.t0 = _context['catch'](0);
						return _context.abrupt('return', false);

					case 9:
					case 'end':
						return _context.stop();
				}
			}
		}, _callee, _this, [[0, 6]]);
	}));

	return function (_x) {
		return _ref.apply(this, arguments);
	};
}();

module.exports.sync = function (path) {
	try {
		fs.accessSync(path);
		return true;
	} catch (_) {
		return false;
	}
};