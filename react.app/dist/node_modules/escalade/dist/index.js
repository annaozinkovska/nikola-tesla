import _regeneratorRuntime from 'babel-runtime/regenerator';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('path'),
    dirname = _require.dirname,
    resolve = _require.resolve;

var _require2 = require('fs'),
    readdir = _require2.readdir,
    stat = _require2.stat;

var _require3 = require('util'),
    promisify = _require3.promisify;

var toStats = promisify(stat);
var toRead = promisify(readdir);

module.exports = function () {
	var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(start, callback) {
		var dir, tmp, stats;
		return _regeneratorRuntime.wrap(function _callee$(_context) {
			while (1) {
				switch (_context.prev = _context.next) {
					case 0:
						dir = resolve('.', start);
						tmp = void 0;
						_context.next = 4;
						return toStats(dir);

					case 4:
						stats = _context.sent;


						if (!stats.isDirectory()) {
							dir = dirname(dir);
						}

					case 6:
						if (!true) {
							_context.next = 22;
							break;
						}

						_context.t0 = callback;
						_context.t1 = dir;
						_context.next = 11;
						return toRead(dir);

					case 11:
						_context.t2 = _context.sent;
						_context.next = 14;
						return (0, _context.t0)(_context.t1, _context.t2);

					case 14:
						tmp = _context.sent;

						if (!tmp) {
							_context.next = 17;
							break;
						}

						return _context.abrupt('return', resolve(dir, tmp));

					case 17:
						dir = dirname(tmp = dir);

						if (!(tmp === dir)) {
							_context.next = 20;
							break;
						}

						return _context.abrupt('break', 22);

					case 20:
						_context.next = 6;
						break;

					case 22:
					case 'end':
						return _context.stop();
				}
			}
		}, _callee, this);
	}));

	return function (_x, _x2) {
		return _ref.apply(this, arguments);
	};
}();